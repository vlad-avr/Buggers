 Для виконання Проекту а лабораторної роботи 3, я вибрав програмне середовище Unity, із подальшим використанням бібліотек для операцій з UI, фізикою та рендерингом об'єктів. Я використував Unity Comunity version, оскільки саме ця ліцензія є безкоштовною, а безпосередня версія engine - 20221.11f. 
 Мій вибір пав саме на Unity, тому що я маю попередній досвід роботи із мвою програмування С# (що є основною мовою для роботи в Unity) , і Unity має дуже обширну спільноту із тоннами матеріалів, що допомагають освоїтись новачку. Серед аналогів є також Unreal Engine та Godot, але як на мене Unreal Engine є більш громіздким інструментом, що підходить для великих ААА проектів більше, а ніж для маленьких студентських робіт. З іншої в основі Godot лежить GDScript, що є своєрідною варіацією Python, з яким я менш знайомий ніж з C-based мовами.
 Коли мова заходить про встановлення Unity, то цей процес зовсім нескладний, на сайті Unity є детальний гайд, як це зробити, а якщо цього недостатньо, то можна знайти відео-туторіали в Youtube. Крім того разом із UnityEngine встановлюється Unity Hub, що дозволяє легко керувати поточною версією середовища, управляти своїми проектами, встановлювати дотакові модулі та підтримувати зв'язок із спільнотою Unity.
 Документація Unity, на мій погляд, є достатньо зрозумілою, і дозволяє як легко знайти конкретний аспект або функцію для більш обдумливого використання, так і просто переглядати певні класи для ознайомлення з їх функціонал, атрибутами та взаємодією з іншими класами.
 Однією із переваг Unity (або недоліків, залежить від користувача) є те, що один і той самий функціонал програми можна реалізувати десятками різних способів (наприклад, для руху об'єктів можна використати математичний підхід, клас Physics, рух через атрибути компоненти Rigidbody, вбудований скріпт PlayerController і т.д.), тож для новачка без знань певних тонкощів та особливостей то чи іншого методів досить важко обрати, який самий посіб використати для реалізації задачі. З іншого боку, для більшості задач досить легко прейти від одного способу до іншого без потреби переписувати великі об'єми коду. Крім того стандартні біблотеки Unity містять багато вже реалізованих функцій (функції Update, Start, Awake і т.д., які є функціями "main loop" програми), що значно зменшує кількість потрібного коду.
 Щодо зрозумілості поведінки певних класів\функцій в основному питань не виникало. В цілому більша частина питань, яка виникала була зумовлена мною, через використання функцій без повного розуміння їх призначення, що легко вирішувалось після кількох хвилин пошуку в документації та перегляду опису функцій. Також бібліотеки UnityEngine мають вспливаючі hints, що значно полегшує роботу із иалознайомими класами. Також варто підмітити прекрасну інтегрованість Unity з Visual Studio 2019\22, refactoring коду фізично приносив мені задволення через свою легкість та швидкість, зумовлені системою відстеження недавніх змін, які потім з'являються із поміткою "*" в potential fixes.
 Міжкласова взаємодія в Unity на висоті, і з цим проблем не виникало майже зовсім. Особливо сподобалась взаємодія класів для 3D фізики та 2D фізики.
 В майбутньому для вирішення схожої задачі я хотів би ускладнити її перемістивишись з 2D середовища в 3D. Також я хотів би освоїти один із модулів Unity - Unity ML Agents, що базуються на Reinforcement Learning. 
