ЗВІТ ДО ЛАБОРАТОРНОЇ РОБОТИ 1А СЕМЕСТР 4

За основу для лаб 1а був обраний проект з 3 семестру під назвою Buggers про використання Unity для реалізації простої програми, в основі яклї лежить genetic algorithm.
ПОСИЛАННЯ НА UML діаграми до проекту ПІСЛЯ РЕФАКТОРІНГУ: https://online.visual-paradigm.com/community/share/buggers-uml-diagrams-vpd-19j5nspug2
Note: Timing діаграма була додана окрема через лімітованість онлайн версії Visual Paradigm
КОРОТКИЙ ОПИС UML ДІАГРАМ:

Class - Class діаграма, звичайна класова діаграма для поректу, описує його класову структуру

Use - Use case діаграма для проекту

EnvironmenController Composite Structure - Composite Structure діаграма для більш детального відображення взаємодії EnvironmentController з іншими класами (агентами)

Component - Component діаграма, зображує взаємодію 3-ох основних компонент проекту між собою

Object - Object діаграма, що відображує проект в момент симуляції середовища (learning stage\ simulation stage)

Package - Package діаграма, що відображає зовнішні packages, що використовує проект

Repopulation Sequence - Sequence діаграма, що деталізує процес репопуляції середовища

Communication - Communication діаграма, що відображує сигнали між об'єктами в момент симуляції середовища

Interaction Overview - проводить огляд взаємодії користувача з проргамою

Timing - зображує перехід різних компонентів проекту між їхними станами

Deployment - Deployment діаграма

Read Activity - Activity діаграма, що деталізує Read use case

Write Activity - Activity діаграма, що деталізує Write use case

State Machine - зображує переходи проекту між різними станами, допомагає визначити тупікові або недосяжні стани

UNIT TESTS:
У Unity є 2 види юніт тестів: Play Mode (тестує код, що виконується тільки під час runtime) та Edit Mode (тестує функції, які виконують не тільки під час runtime)
Було додано як Play Mode tests для тестування логіки переміщення агентів, так і Edit Mode tests для тестування правильності виконання операцій в NNet.
Play Mode: 
- AgentTest Class - тестує логіку переміщення агентів

Edit Mode:
- NNetTest Class - тестує правильність операцій та конструкторів в NNet

REFACTORING: 
Після побудови первинної Клас Діаграми було помічено можливості покращити структуру коду, а саме:
- Створення батьківського абстрактного класу AgentController для класів PreyController i PredatorController
- Винесення функцій, відповідаючих за UI, в окремий клас - UIManager
- Виділення окремого класу FoodSpawner для керування спавном Food об'єктів в симуляції (раніше цим займався EnvironmentController)
Також було змінено функціонал в проекті:
- Агентам надана можливість керувати не тільки кутом повороту, а й прискоренням, за допомогою NNet
- Перероблено систему зору (sight) для Агентів, оскільки це спричиняло певні баги під час зчитування сенсорних даних
Також були додані косметичні зміни для коду:
- Додані коментарі для пояснення роботи кожної функції
- Прибрані непотрібні коментарі та надлишковий код
РЕЗУЛЬТАТ: 
- Код став більш відповідним принципам ООП та більш читабельним
- Новий функціонал зробив результати симуляцій більш цікавшими
Юніт Тести при цьому проходяться, тож логіку програми порушено не було.

Також до проекту створено Глосарій для пояснення термінології (див. текстовий файл "Глосарій")

Документація до проекту була створена за допомогою Doxygen (див. index.html в Documentation)
