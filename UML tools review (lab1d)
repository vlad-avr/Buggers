ЗВІТ-РЕТРОСПЕКТИВА

Для створення UML діаграм я використовував 3 різних інтсрументи, а саме: Lucidcharts, Visual Paradigm Community Version та Visual Paradigm Online.
1. Основними причинами вибору саме таких інструментів була їх доступність, адже Lucidcharts як і Visual Paradigm Online є онлайн-сервісами, тож працювати із ними можна з
різних приладів. Також, мене зацікавили туторіали з uml-моделювання, які створенні безпосередньо Lucidcharts та Visual Paradigm, хоча варто зазначити, що Lucidcharts 
надає більш наглядні відео-туторіали, в той час як Visual Paradigm пропонує текстові, але більш змістовні.
2. Всі інструменти є легкодоступними для звичайного користувача і їх можна легко встановити. Також наявні багато туторіалів від інших користувачів, які ще більше
полегшують роботу із даними інструментами. Варто щащначити, що Lucidcharts та Visual Paradigm Online є онлайн-інструментам, які взагалі не потрібно встановлювати,
необхідно лише зареєсруватись.
3. Visual Paradigm має достатньо змістовну документацію, яка не раз допомагала мені, яка діаграма за що відповідає і як саме її можна реалізувати в програмі. З документацією
Lucidcharts знайомий не був, не було порібно.
4. Для моделювання я використовував вбудовані пекеджі з елементами UML-діаграм, хоча варто зазначити, що повний спектр необхідних uml-елементів містив в собі лише 
Visual Paradigm Community Version (зокрема в онлайн версії цього інструменти відсутні ресурси для створення Timing діаграм).
5. На жаль, я не можу точно сказати, які саме діаграми підтримуються та не підтримуються в Lucidcharts (робив тільки Object, Use Case та Class діаграми), оскільки більшість діаграм
робив у Visual Pradigm. Тим не менш, Visual Paradigm Online також не підтримує всі види діаграм, зокрема Profile та Timing, саме тому для завершення лабораторної
роботи я використав десктоп версію Visual Paradigm.
6. Не всі типи асоціацій підтримуються в онлайн-редакторах, або принаймні мають різні позначення для одних і тих самих елементів. Серед таких прикладів можу назвати елементи
пов'язані з exception handling у Activity діаграмі в Visual Paradigm Online, яких просто немає.
7. Я не використовував додаткові можливості генерації діаграм з коду (навіть якщо такі і були у Visual Paradigm), хоча я згенерував Class діаграми за допомогою Doxygen, коли робив
документацію коду.
8. Я не сказав би, що надлишкових операцій під час роботи з інструментами було забагато, але точно можу сказати, що їх може бути менше. Зокрема забагто натискань кнопок 
займала щміна стилю лінії в діаграмі (3-4 натискання). В Lucidcharts це реазіовано значно простіше. Схожа ситуація із Class дфаграмою, де для додавання атрибуту потрібно викликати
контекстне меню.
9. Також виникало багато ситуацій, коли я не розумів до кінця, чому відбувалась а чи інша операція, особливо, під час створення Component діаграми (довго не міг зрозуміти
як провести лінію, що надає інтерфейс, і в кінці-кінців так і не зрозумів як я це робив).
10. Проблеми, що виникали під час роботи з інструментами, я вирішував 2-ма шляхами: або переключався на інший інструмент, або шукав рішення в документації.
11. Хороші аспекти Lucidcharts:
  - сучасний дизайн;
  - гнучкий інтерфейс (іноді занадто гнучкий, не зрозуміло, де закінчуються елементи UML, а де починаються вбудовані об'єкти Lucidcharts);
  - легкість в освоєнні;
  - активна community
  Хороші аспекти Visual Paradigm Online:
  - простота;
  - наявність хмарного сховища;
  - обширний список uml пекеджів;
  - наявність текстових пояснень на вебсайті.
  Хороші аспекти Visual Paradigm Community Version:
  - найбільша колекція uml елементів;
  - наявність шаблонів діаграм;
  - наявність текстових пояснень на вебсайті.
12. Погані аспекти Lucidcharts:
  - недостатня кількість елементів для використання всього функіоналу UML;
  - обмеження на кількість елементів в діаграмі у безкоштовній версії;
  Погані аспекти Visual Paradigm Online:
  - недостатня кількість елементів для використання всього функіоналу UML;
  Погані аспекти Visual Paradigm Community Version:
  - нагромадженість, що спричиняє плутанину.
13. Наступного разу я планую одразу використовувати Visual Paradigm Community Version, адже не зважаючи на відносну складність і заплунаість, саме цей інструмент містить весь необхідний функціонал
для повного опису програми за допомогою UML-діаграм.
